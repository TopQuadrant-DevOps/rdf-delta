/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

options
{
      // \ u processed in the input stream
      // SPARQL 1.0
    JAVA_UNICODE_ESCAPE   = true ;
    UNICODE_INPUT         = false ;

//       // \ u processed after parsing.
//       // strings, prefix names, IRIs
//       JAVA_UNICODE_ESCAPE   = false ;
//       UNICODE_INPUT         = true ;

  STATIC                = false ;
//  DEBUG_PARSER          = true ;
//  DEBUG_TOKEN_MANAGER   = true ;
}

PARSER_BEGIN(TIOjavacc)
/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.seaborne.riot.tio.alt.javacc ;

import org.seaborne.riot.tio.alt.* ;
import org.apache.jena.graph.* ;
import org.apache.jena.sparql.expr.* ;
import org.apache.jena.riot.tokens.TokenType ;

public class TIOjavacc extends TIOParserBase
{}
PARSER_END(TIOjavacc)

// Entry points:
//   Tuples()
//   Tokens()

void Tuples(): { }
{
  ByteOrderMark()
  { startTuples() ; }
  (Tuple())*
  { finishTuples() ; }
  <EOF>
}

void Tokens() : {}
{
  ByteOrderMark()
  { startTokens() ; }
  (Token())*
  { finishTokens() ; }
  <EOF>
}

void ByteOrderMark() : {}
{
   (<BOM>)?
}

void Tuple() : {Token t ; }
{
   { startTuple() ; }
   (Entry())*
   t = <DOT>
   { finishTuple(t.beginLine, t.beginColumn) ; }
}

// No DOT.
void Entry() : { Token t ; TokenType tt ; }
{
  ( t = <KEYWORD>  { emitKeyword(t.image, t.beginLine, t.beginColumn) ; }
  | Symbol()
  | RDFTerm()
  | Var()
  | Hex()
  // Not a langtag.  Lookahead problems. String then directive.
  | t = <LANGTAG>
    { String s = stripChars(t.image, 1);
      emitDirective(s, t.beginLine, t.beginColumn) ; }
  )
}

// Includes DOT.
void Token() : { Token t ; }
{
  ( Entry()
  | t = <DOT> { emitSymbol(TokenType.DOT, t.beginLine, t.beginColumn) ; }
  )
}

void RDFTerm() : { String s ; Token t ; }
{
  ( s = iri() { emitIRI(s) ; }
  | s = PName() { emitPrefixedName(s) ; }
  | t = <ANY>   { emitANY(t.image, t.beginLine, t.beginColumn); }
  | Literal()
  | BlankNode()
  )
}

void Literal() : {}
{
  ( RDFLiteral()
  | NumericLiteral()
  | BooleanLiteral()
  )
}

void RDFLiteral() : { Token t ; String lex = null ; }
{
  lex = String()
  { String lang = null ; String datatype = null ; }
  (
    ( t = <LANGTAG>  { lang = stripChars(t.image, 1) ; } )
  |
    ( <DATATYPE> datatype = iri() )
  )?
    { emitLiteral(lex, lang, datatype) ; }
} 

void Hex() : { Token t ; }
{
  t = <HEX_INT> { emitHex(t.image, t.beginLine, t.beginColumn ) ; }
}

void NumericLiteral() : { }
{
  ( NumericLiteralUnsigned()
  | NumericLiteralPositive()
  | NumericLiteralNegative()
  )
}

void NumericLiteralUnsigned() : { Token t ; }
{
  t = <INTEGER> { emitLiteralInteger(t.image, t.beginLine, t.beginColumn) ; }
| t = <DECIMAL> { emitLiteralDecimal(t.image, t.beginLine, t.beginColumn) ; }
| t = <DOUBLE>  { emitLiteralDouble(t.image, t.beginLine, t.beginColumn) ; }
}

void NumericLiteralPositive() : { Token t ; }
{
  t = <INTEGER_POSITIVE> { emitLiteralInteger(t.image, t.beginLine, t.beginColumn) ; }
| t = <DECIMAL_POSITIVE> { emitLiteralDecimal(t.image, t.beginLine, t.beginColumn) ; }
| t = <DOUBLE_POSITIVE>  { emitLiteralDouble(t.image, t.beginLine, t.beginColumn) ; }
}

void NumericLiteralNegative() : { Token t ; }
{
  t = <INTEGER_NEGATIVE> { emitLiteralInteger(t.image, t.beginLine, t.beginColumn) ; }
| t = <DECIMAL_NEGATIVE> { emitLiteralDecimal(t.image, t.beginLine, t.beginColumn) ; }
| t = <DOUBLE_NEGATIVE>  { emitLiteralDouble(t.image, t.beginLine, t.beginColumn) ; }
}

void BooleanLiteral() : { Token t ; }
{
  t = <TRUE> { emitBoolean(t.image, t.beginLine, t.beginColumn) ; }
 |
  t = <FALSE> { emitBoolean(t.image, t.beginLine, t.beginColumn) ; }
}

String String() : { Token t ; TokenType tt ; String lex ; }
{
  ( t = <STRING_LITERAL1> { lex = stripQuotes(t.image) ; tt = TokenType.STRING1 ; }
  | t = <STRING_LITERAL2> { lex = stripQuotes(t.image) ; tt = TokenType.STRING2 ; }
  | t = <STRING_LITERAL_LONG1> { lex = stripQuotes3(t.image) ; tt = TokenType.LONG_STRING1 ; }
  | t = <STRING_LITERAL_LONG2> { lex = stripQuotes3(t.image) ; tt = TokenType.LONG_STRING2 ; }
  )
    {
      lex = unescapeStr(lex,  t.beginLine, t.beginColumn) ;
      return lex ;
    }
}

String iri() : { Token t ; }
{
  t = <IRI>
  { return processIRI(t.image, t.beginLine, t.beginColumn) ; }
}

String PName() : { Token t ; }
{
    ( t = <PNAME_NS> | t = <PNAME_LN> )
    //{ emitPrefixedName(t.image, t.beginLine, t.beginColumn) ; }
    { return t.image ; }
}

void Var() : { Token t ; }
{
    //( t = <VAR1> | t = <VAR2> )
    t = <VAR>
    { String s =  stripChars(t.image, 1) ;
      emitVariable(s, t.beginLine, t.beginColumn) ; }
}

void BlankNode() :  { Token t = null ; }
{
  t = <BLANK_NODE_LABEL>
    { emitBlankNode(t.image, t.beginLine, t.beginColumn) ; }  
//|
//  t = <LBRACKET> <RBRACKET> { emitNewBlankNode(t.beginLine, t.beginColumn) ; }
//  t = <ANON> { emitNewBlankNode(t.beginLine, t.beginColumn) ; }
}

void Symbol() : { TokenType tt ; Token t ; }
{
  ( t = <SEMICOLON>  { tt = TokenType.SEMICOLON ; }
  | t = <COMMA>      { tt = TokenType.COMMA ; }
  | t = <LBRACE>     { tt = TokenType.LBRACE ; }
  | t = <RBRACE>     { tt = TokenType.RBRACE ; }
  | t = <LPAREN>     { tt = TokenType.LPAREN ; }
  | t = <RPAREN>     { tt = TokenType.RPAREN ; }
  | t = <LBRACKET>   { tt = TokenType.LBRACKET ; }
  | t = <RBRACKET>   { tt = TokenType.RBRACKET ; }
  | t = <EQ>         { tt = TokenType.EQUALS ; }
  | t = <COLON>      { tt = TokenType.COLON ; }
  | t = <UNDERSCORE> { tt = TokenType.UNDERSCORE ; }
  | t = <PLUS>       { tt = TokenType.PLUS ; }
  | t = <MINUS>      { tt = TokenType.MINUS ; }
  | t = <LT>         { tt = TokenType.LT ; }
  | t = <GT>         { tt = TokenType.GT ; }
  | t = <STAR>       { tt = TokenType.STAR ; }
  )
  { emitSymbol(tt, t.beginLine, t.beginColumn) ; }
}

// ------------------------------------------
// Tokens

// Comments and whitespace

SKIP : { " " | "\t" | "\n" | "\r" | "\f" }

SPECIAL_TOKEN :
{ <SINGLE_LINE_COMMENT: "#" (~["\n","\r"])* ("\n"|"\r"|"\r\n")? > }

// When any other character is seen in the IN_COMMENT state, skip it.
< IN_COMMENT > SKIP : { < ~[] > }
      
TOKEN: { 
  <#WS: " " | "\t" | "\n" | "\r" | "\f">
|
  // Whitespace or comment.
  <#WSC: <WS> | <SINGLE_LINE_COMMENT> >
|
  <BOM:    "\uFEFF">
}

// Main tokens */

TOKEN:
{
//    // Includes # for relative URIs
//    <IRI:         "<" (~[ ">","<", "\"", "{", "}", "^", "\\", "|", "`", 
//                       "\u0000"-"\u0020"])* ">" >
   // Check more later.
   <IRI: "<" (~["\t","\n","\r","\f",">"])* ">" >
|  <PNAME_NS: (<PN_PREFIX>)? ":" >
|  <PNAME_LN: <PNAME_NS> <PN_LOCAL> >

|  <BLANK_NODE_LABEL: "_:" (<PN_CHARS_U> | ["0"-"9"]) ((<PN_CHARS>|".")* <PN_CHARS>)?  >

//|  <VAR1: "?" <VARNAME> >
//|  <VAR2: "$" <VARNAME> >

|  <VAR:    "?" <VARNAME> > 
|  <LANGTAG: <AT> (<A2Z>)+("-" (<A2ZN>)+)* >
|  <#A2Z: ["a"-"z","A"-"Z"]>
|  <#A2ZN: ["a"-"z","A"-"Z","0"-"9"]>
|  < DATATYPE: "^^">
|  < AT: "@">
}

// -------------------------------------------------
TOKEN [IGNORE_CASE] :
{
  < TRUE:        "true" >
| < FALSE:       "false" >
| < ANY:         "any" >
| < KEYWORD:     <A2Z> (<A2Z>|<DIGITS>|"_"|"-")* >
| < DOT:         "." >
}

TOKEN :
{
  < #DIGITS: (["0"-"9"])+>
| < INTEGER: <DIGITS> >
| < DECIMAL: (<DIGITS>)? "." <DIGITS> >
| < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
| < DOUBLE:   // Required exponent.
      (
        (["0"-"9"])+ "." (["0"-"9"])* <EXPONENT>
        | "." (["0"-"9"])+ (<EXPONENT>)
        | (["0"-"9"])+ <EXPONENT>
      )
      >
| < INTEGER_POSITIVE: <PLUS> <INTEGER> >
| < DECIMAL_POSITIVE: <PLUS> <DECIMAL> >
| < DOUBLE_POSITIVE:  <PLUS> <DOUBLE> >

| < INTEGER_NEGATIVE: <MINUS> <INTEGER> >
| < DECIMAL_NEGATIVE: <MINUS> <DECIMAL> >
| < DOUBLE_NEGATIVE:  <MINUS> <DOUBLE> >

| < #QUOTE_3D: "\"\"\"">
| < #QUOTE_3S: "'''">
| <ECHAR: "\\" ( "t"|"b"|"n"|"r"|"f"|"\\"|"\""|"'") >
| < STRING_LITERAL1: 
      // Single quoted string
      "'" ( (~["'","\\","\n","\r"]) | <ECHAR> )* "'" > 
| < STRING_LITERAL2:
    // Double quoted string
      "\"" ( (~["\"","\\","\n","\r"]) | <ECHAR> )* "\"" >
| < STRING_LITERAL_LONG1:
     <QUOTE_3S> 
      ( ("'" | "''")? (~["'","\\"] | <ECHAR> ))*
     <QUOTE_3S> >

| < STRING_LITERAL_LONG2: 
     <QUOTE_3D> 
      ( ("\"" | "\"\"")? (~["\"","\\"] | <ECHAR> ))*
     <QUOTE_3D> >
}

TOKEN :
{
  < LPAREN:    "(" >
| < RPAREN:    ")" >
// | <NIL: <LPAREN> (<WSC>)* <RPAREN> >

| < LBRACE:    "{" >
| < RBRACE:    "}" >

| < LBRACKET:  "[" >
| < RBRACKET:  "]" >
// | < ANON:      <LBRACKET> (<WSC>)* <RBRACKET> >

| < SEMICOLON: ";" >
| < COLON: ":" >
| < COMMA:     "," >
| < EQ:        "=" >
// | < NE:        "!=" >
| < GT:        ">" >
| < LT:        "<" >
// | < LE:        "<=" >
// | < GE:        ">=" >
// 
// | < BANG:    "!" >
| < TILDE:   "~" >
// | < COLON:   ":" >
// 
// | < SC_OR:   "||" >
// | < SC_AND:  "&&" >

| < PLUS:    "+" >
| < MINUS:   "-" >
| < UNDERSCORE:    "_" >
| < STAR:    "*" >
//| < SLASH:   "/" >
// 
// //| < AMP: "&" >
// //| < REM: "%" >
// 
// | < ASSIGN:     ":=">
// 
// // Path related
// | < VBAR:     "|" >
// | < CARAT:    "^" >
// | < FPATH:    "->" >
// | < RPATH:    "<-" >
// | < QMARK:    "?" >

}

TOKEN:
{
  // XML 1.1 NCNameStartChar without "_"
  <#PN_CHARS_BASE:
          ["A"-"Z"] | ["a"-"z"] |
          ["\u00C0"-"\u00D6"] | ["\u00D8"-"\u00F6"] | ["\u00F8"-"\u02FF"] |
          ["\u0370"-"\u037D"] | ["\u037F"-"\u1FFF"] |
          ["\u200C"-"\u200D"] | ["\u2070"-"\u218F"] | ["\u2C00"-"\u2FEF"] |
          ["\u3001"-"\uD7FF"] | ["\uF900"-"\uFFFD"] 
          >
          // [#x10000-#xEFFFF]
|
  // With underscore
  <#PN_CHARS_U: <PN_CHARS_BASE> | "_" >
|
  <#PN_CHARS: (<PN_CHARS_U> | "-" | ["0"-"9"] | "\u00B7" |
              ["\u0300"-"\u036F"] | ["\u203F"-"\u2040"] ) >
|
  // No leading "_", no trailing ".", can have dot inside prefix name.
  <#PN_PREFIX: <PN_CHARS_BASE> ((<PN_CHARS>|".")* <PN_CHARS>)?  >
|
  // Local part.
  <#PN_LOCAL: (<PN_CHARS_U> | ":" | ["0"-"9"] | <PLX> ) 
              ( (<PN_CHARS> | "." |":" | <PLX> )* 
                (<PN_CHARS> | ":" | <PLX>) )?  >
|
  <#VARNAME: ( <PN_CHARS_U> | ["0"-"9"] )
             ( <PN_CHARS_U> | ["0"-"9"] | "\u00B7" |
               ["\u0300"-"\u036F"] | ["\u203F"-"\u2040"] )* >
|
  < #PN_LOCAL_ESC: "\\" 
          ( "_" | 
            "~" | "." | "-" | "!" | "$" | "&" | "'" | 
           "(" | ")" | "*" | "+" | "," | ";" | "=" | 
           "/" | "?" | "#" | "@" | "%" ) >
|
  <#PLX:  <PERCENT> | <PN_LOCAL_ESC> >
|
  < #HEX: ["0"-"9"] | ["A"-"F"] | ["a"-"f"] >
|
  < #PERCENT: "%" <HEX> <HEX> >
|
  <HEX_INT: "0"["x","X"](<HEX>)+>
}

// Catch-all tokens.  Must be last.  
// Any non-whitespace.  Causes a parser exception, rather than a
// token manager error (which hides the line numbers).
TOKEN:
{
  <#UNKNOWN: (~[" ","\t","\n","\r","\f" ])+ >
}

/*
# Local Variables:
# tab-width: 4
# indent-tabs-mode: nil
# comment-default-style: "//"
# End:
*/
