/* TIOjavacc.java */
/* Generated By:JavaCC: Do not edit this line. TIOjavacc.java */
/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.seaborne.riot.tio.alt.javacc ;

import org.seaborne.riot.tio.alt.* ;
import org.apache.jena.graph.* ;
import org.apache.jena.sparql.expr.* ;
import org.apache.jena.riot.tokens.TokenType ;


@SuppressWarnings("all")
public class TIOjavacc extends TIOParserBase implements TIOjavaccConstants {

// Entry points:
//   Tuples()
//   Tokens()
  final public 
void Tuples() throws ParseException {
    ByteOrderMark();
startTuples() ;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IRI:
      case PNAME_NS:
      case PNAME_LN:
      case BLANK_NODE_LABEL:
      case VAR:
      case LANGTAG:
      case TRUE:
      case FALSE:
      case ANY:
      case KEYWORD:
      case DOT:
      case INTEGER:
      case DECIMAL:
      case DOUBLE:
      case INTEGER_POSITIVE:
      case DECIMAL_POSITIVE:
      case DOUBLE_POSITIVE:
      case INTEGER_NEGATIVE:
      case DECIMAL_NEGATIVE:
      case DOUBLE_NEGATIVE:
      case STRING_LITERAL1:
      case STRING_LITERAL2:
      case STRING_LITERAL_LONG1:
      case STRING_LITERAL_LONG2:
      case LPAREN:
      case RPAREN:
      case LBRACE:
      case RBRACE:
      case LBRACKET:
      case RBRACKET:
      case SEMICOLON:
      case COLON:
      case COMMA:
      case EQ:
      case GT:
      case LT:
      case PLUS:
      case MINUS:
      case UNDERSCORE:
      case STAR:
      case HEX_INT:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      Tuple();
    }
finishTuples() ;
    jj_consume_token(0);
  }

  final public void Tokens() throws ParseException {
    ByteOrderMark();
startTokens() ;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IRI:
      case PNAME_NS:
      case PNAME_LN:
      case BLANK_NODE_LABEL:
      case VAR:
      case LANGTAG:
      case TRUE:
      case FALSE:
      case ANY:
      case KEYWORD:
      case DOT:
      case INTEGER:
      case DECIMAL:
      case DOUBLE:
      case INTEGER_POSITIVE:
      case DECIMAL_POSITIVE:
      case DOUBLE_POSITIVE:
      case INTEGER_NEGATIVE:
      case DECIMAL_NEGATIVE:
      case DOUBLE_NEGATIVE:
      case STRING_LITERAL1:
      case STRING_LITERAL2:
      case STRING_LITERAL_LONG1:
      case STRING_LITERAL_LONG2:
      case LPAREN:
      case RPAREN:
      case LBRACE:
      case RBRACE:
      case LBRACKET:
      case RBRACKET:
      case SEMICOLON:
      case COLON:
      case COMMA:
      case EQ:
      case GT:
      case LT:
      case PLUS:
      case MINUS:
      case UNDERSCORE:
      case STAR:
      case HEX_INT:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      Token();
    }
finishTokens() ;
    jj_consume_token(0);
  }

  final public void ByteOrderMark() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BOM:{
      jj_consume_token(BOM);
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      ;
    }
  }

  final public void Tuple() throws ParseException {Token t ;
startTuple() ;
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IRI:
      case PNAME_NS:
      case PNAME_LN:
      case BLANK_NODE_LABEL:
      case VAR:
      case LANGTAG:
      case TRUE:
      case FALSE:
      case ANY:
      case KEYWORD:
      case INTEGER:
      case DECIMAL:
      case DOUBLE:
      case INTEGER_POSITIVE:
      case DECIMAL_POSITIVE:
      case DOUBLE_POSITIVE:
      case INTEGER_NEGATIVE:
      case DECIMAL_NEGATIVE:
      case DOUBLE_NEGATIVE:
      case STRING_LITERAL1:
      case STRING_LITERAL2:
      case STRING_LITERAL_LONG1:
      case STRING_LITERAL_LONG2:
      case LPAREN:
      case RPAREN:
      case LBRACE:
      case RBRACE:
      case LBRACKET:
      case RBRACKET:
      case SEMICOLON:
      case COLON:
      case COMMA:
      case EQ:
      case GT:
      case LT:
      case PLUS:
      case MINUS:
      case UNDERSCORE:
      case STAR:
      case HEX_INT:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      Entry();
    }
    t = jj_consume_token(DOT);
finishTuple(t.beginLine, t.beginColumn) ;
  }

// No DOT.
  final public void Entry() throws ParseException {Token t ; TokenType tt ;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case KEYWORD:{
      t = jj_consume_token(KEYWORD);
emitKeyword(t.image, t.beginLine, t.beginColumn) ;
      break;
      }
    case LPAREN:
    case RPAREN:
    case LBRACE:
    case RBRACE:
    case LBRACKET:
    case RBRACKET:
    case SEMICOLON:
    case COLON:
    case COMMA:
    case EQ:
    case GT:
    case LT:
    case PLUS:
    case MINUS:
    case UNDERSCORE:
    case STAR:{
      Symbol();
      break;
      }
    case IRI:
    case PNAME_NS:
    case PNAME_LN:
    case BLANK_NODE_LABEL:
    case TRUE:
    case FALSE:
    case ANY:
    case INTEGER:
    case DECIMAL:
    case DOUBLE:
    case INTEGER_POSITIVE:
    case DECIMAL_POSITIVE:
    case DOUBLE_POSITIVE:
    case INTEGER_NEGATIVE:
    case DECIMAL_NEGATIVE:
    case DOUBLE_NEGATIVE:
    case STRING_LITERAL1:
    case STRING_LITERAL2:
    case STRING_LITERAL_LONG1:
    case STRING_LITERAL_LONG2:{
      RDFTerm();
      break;
      }
    case VAR:{
      Var();
      break;
      }
    case HEX_INT:{
      Hex();
      break;
      }
    case LANGTAG:{
      t = jj_consume_token(LANGTAG);
String s = stripChars(t.image, 1);
      emitDirective(s, t.beginLine, t.beginColumn) ;
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// Includes DOT.
  final public void Token() throws ParseException {Token t ;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IRI:
    case PNAME_NS:
    case PNAME_LN:
    case BLANK_NODE_LABEL:
    case VAR:
    case LANGTAG:
    case TRUE:
    case FALSE:
    case ANY:
    case KEYWORD:
    case INTEGER:
    case DECIMAL:
    case DOUBLE:
    case INTEGER_POSITIVE:
    case DECIMAL_POSITIVE:
    case DOUBLE_POSITIVE:
    case INTEGER_NEGATIVE:
    case DECIMAL_NEGATIVE:
    case DOUBLE_NEGATIVE:
    case STRING_LITERAL1:
    case STRING_LITERAL2:
    case STRING_LITERAL_LONG1:
    case STRING_LITERAL_LONG2:
    case LPAREN:
    case RPAREN:
    case LBRACE:
    case RBRACE:
    case LBRACKET:
    case RBRACKET:
    case SEMICOLON:
    case COLON:
    case COMMA:
    case EQ:
    case GT:
    case LT:
    case PLUS:
    case MINUS:
    case UNDERSCORE:
    case STAR:
    case HEX_INT:{
      Entry();
      break;
      }
    case DOT:{
      t = jj_consume_token(DOT);
emitSymbol(TokenType.DOT, t.beginLine, t.beginColumn) ;
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void RDFTerm() throws ParseException {String s ; Token t ;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IRI:{
      s = iri();
emitIRI(s) ;
      break;
      }
    case PNAME_NS:
    case PNAME_LN:{
      s = PName();
emitPrefixedName(s) ;
      break;
      }
    case ANY:{
      t = jj_consume_token(ANY);
emitANY(t.image, t.beginLine, t.beginColumn);
      break;
      }
    case TRUE:
    case FALSE:
    case INTEGER:
    case DECIMAL:
    case DOUBLE:
    case INTEGER_POSITIVE:
    case DECIMAL_POSITIVE:
    case DOUBLE_POSITIVE:
    case INTEGER_NEGATIVE:
    case DECIMAL_NEGATIVE:
    case DOUBLE_NEGATIVE:
    case STRING_LITERAL1:
    case STRING_LITERAL2:
    case STRING_LITERAL_LONG1:
    case STRING_LITERAL_LONG2:{
      Literal();
      break;
      }
    case BLANK_NODE_LABEL:{
      BlankNode();
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Literal() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STRING_LITERAL1:
    case STRING_LITERAL2:
    case STRING_LITERAL_LONG1:
    case STRING_LITERAL_LONG2:{
      RDFLiteral();
      break;
      }
    case INTEGER:
    case DECIMAL:
    case DOUBLE:
    case INTEGER_POSITIVE:
    case DECIMAL_POSITIVE:
    case DOUBLE_POSITIVE:
    case INTEGER_NEGATIVE:
    case DECIMAL_NEGATIVE:
    case DOUBLE_NEGATIVE:{
      NumericLiteral();
      break;
      }
    case TRUE:
    case FALSE:{
      BooleanLiteral();
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void RDFLiteral() throws ParseException {Token t ; String lex = null ;
    lex = String();
String lang = null ; String datatype = null ;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LANGTAG:
    case DATATYPE:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LANGTAG:{
        t = jj_consume_token(LANGTAG);
lang = stripChars(t.image, 1) ;
        break;
        }
      case DATATYPE:{
        jj_consume_token(DATATYPE);
        datatype = iri();
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      ;
    }
emitLiteral(lex, lang, datatype) ;
  }

  final public void Hex() throws ParseException {Token t ;
    t = jj_consume_token(HEX_INT);
emitHex(t.image, t.beginLine, t.beginColumn ) ;
  }

  final public void NumericLiteral() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER:
    case DECIMAL:
    case DOUBLE:{
      NumericLiteralUnsigned();
      break;
      }
    case INTEGER_POSITIVE:
    case DECIMAL_POSITIVE:
    case DOUBLE_POSITIVE:{
      NumericLiteralPositive();
      break;
      }
    case INTEGER_NEGATIVE:
    case DECIMAL_NEGATIVE:
    case DOUBLE_NEGATIVE:{
      NumericLiteralNegative();
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void NumericLiteralUnsigned() throws ParseException {Token t ;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER:{
      t = jj_consume_token(INTEGER);
emitLiteralInteger(t.image, t.beginLine, t.beginColumn) ;
      break;
      }
    case DECIMAL:{
      t = jj_consume_token(DECIMAL);
emitLiteralDecimal(t.image, t.beginLine, t.beginColumn) ;
      break;
      }
    case DOUBLE:{
      t = jj_consume_token(DOUBLE);
emitLiteralDouble(t.image, t.beginLine, t.beginColumn) ;
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void NumericLiteralPositive() throws ParseException {Token t ;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER_POSITIVE:{
      t = jj_consume_token(INTEGER_POSITIVE);
emitLiteralInteger(t.image, t.beginLine, t.beginColumn) ;
      break;
      }
    case DECIMAL_POSITIVE:{
      t = jj_consume_token(DECIMAL_POSITIVE);
emitLiteralDecimal(t.image, t.beginLine, t.beginColumn) ;
      break;
      }
    case DOUBLE_POSITIVE:{
      t = jj_consume_token(DOUBLE_POSITIVE);
emitLiteralDouble(t.image, t.beginLine, t.beginColumn) ;
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void NumericLiteralNegative() throws ParseException {Token t ;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER_NEGATIVE:{
      t = jj_consume_token(INTEGER_NEGATIVE);
emitLiteralInteger(t.image, t.beginLine, t.beginColumn) ;
      break;
      }
    case DECIMAL_NEGATIVE:{
      t = jj_consume_token(DECIMAL_NEGATIVE);
emitLiteralDecimal(t.image, t.beginLine, t.beginColumn) ;
      break;
      }
    case DOUBLE_NEGATIVE:{
      t = jj_consume_token(DOUBLE_NEGATIVE);
emitLiteralDouble(t.image, t.beginLine, t.beginColumn) ;
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void BooleanLiteral() throws ParseException {Token t ;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TRUE:{
      t = jj_consume_token(TRUE);
emitBoolean(t.image, t.beginLine, t.beginColumn) ;
      break;
      }
    case FALSE:{
      t = jj_consume_token(FALSE);
emitBoolean(t.image, t.beginLine, t.beginColumn) ;
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public String String() throws ParseException {Token t ; TokenType tt ; String lex ;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STRING_LITERAL1:{
      t = jj_consume_token(STRING_LITERAL1);
lex = stripQuotes(t.image) ; tt = TokenType.STRING1 ;
      break;
      }
    case STRING_LITERAL2:{
      t = jj_consume_token(STRING_LITERAL2);
lex = stripQuotes(t.image) ; tt = TokenType.STRING2 ;
      break;
      }
    case STRING_LITERAL_LONG1:{
      t = jj_consume_token(STRING_LITERAL_LONG1);
lex = stripQuotes3(t.image) ; tt = TokenType.LONG_STRING1 ;
      break;
      }
    case STRING_LITERAL_LONG2:{
      t = jj_consume_token(STRING_LITERAL_LONG2);
lex = stripQuotes3(t.image) ; tt = TokenType.LONG_STRING2 ;
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
lex = unescapeStr(lex,  t.beginLine, t.beginColumn) ;
      {if ("" != null) return lex ;}
    throw new Error("Missing return statement in function");
  }

  final public String iri() throws ParseException {Token t ;
    t = jj_consume_token(IRI);
{if ("" != null) return processIRI(t.image, t.beginLine, t.beginColumn) ;}
    throw new Error("Missing return statement in function");
  }

  final public String PName() throws ParseException {Token t ;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PNAME_NS:{
      t = jj_consume_token(PNAME_NS);
      break;
      }
    case PNAME_LN:{
      t = jj_consume_token(PNAME_LN);
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return t.image ;}
    throw new Error("Missing return statement in function");
  }

  final public void Var() throws ParseException {Token t ;
    //( t = <VAR1> | t = <VAR2> )
        t = jj_consume_token(VAR);
String s =  stripChars(t.image, 1) ;
      emitVariable(s, t.beginLine, t.beginColumn) ;
  }

  final public void BlankNode() throws ParseException {Token t = null ;
    t = jj_consume_token(BLANK_NODE_LABEL);
emitBlankNode(t.image, t.beginLine, t.beginColumn) ;
  }

  final public void Symbol() throws ParseException {TokenType tt ; Token t ;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SEMICOLON:{
      t = jj_consume_token(SEMICOLON);
tt = TokenType.SEMICOLON ;
      break;
      }
    case COMMA:{
      t = jj_consume_token(COMMA);
tt = TokenType.COMMA ;
      break;
      }
    case LBRACE:{
      t = jj_consume_token(LBRACE);
tt = TokenType.LBRACE ;
      break;
      }
    case RBRACE:{
      t = jj_consume_token(RBRACE);
tt = TokenType.RBRACE ;
      break;
      }
    case LPAREN:{
      t = jj_consume_token(LPAREN);
tt = TokenType.LPAREN ;
      break;
      }
    case RPAREN:{
      t = jj_consume_token(RPAREN);
tt = TokenType.RPAREN ;
      break;
      }
    case LBRACKET:{
      t = jj_consume_token(LBRACKET);
tt = TokenType.LBRACKET ;
      break;
      }
    case RBRACKET:{
      t = jj_consume_token(RBRACKET);
tt = TokenType.RBRACKET ;
      break;
      }
    case EQ:{
      t = jj_consume_token(EQ);
tt = TokenType.EQUALS ;
      break;
      }
    case COLON:{
      t = jj_consume_token(COLON);
tt = TokenType.COLON ;
      break;
      }
    case UNDERSCORE:{
      t = jj_consume_token(UNDERSCORE);
tt = TokenType.UNDERSCORE ;
      break;
      }
    case PLUS:{
      t = jj_consume_token(PLUS);
tt = TokenType.PLUS ;
      break;
      }
    case MINUS:{
      t = jj_consume_token(MINUS);
tt = TokenType.MINUS ;
      break;
      }
    case LT:{
      t = jj_consume_token(LT);
tt = TokenType.LT ;
      break;
      }
    case GT:{
      t = jj_consume_token(GT);
tt = TokenType.GT ;
      break;
      }
    case STAR:{
      t = jj_consume_token(STAR);
tt = TokenType.STAR ;
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
emitSymbol(tt, t.beginLine, t.beginColumn) ;
  }

  /** Generated Token Manager. */
  public TIOjavaccTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[18];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xdbe1f800,0xdbe1f800,0x400,0xd9e1f800,0xd9e1f800,0xdbe1f800,0xd8e07800,0xd8600000,0x90000,0x90000,0xd8000000,0x58000000,0x80000000,0x0,0x600000,0x0,0x3000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x1effff1f,0x1effff1f,0x0,0x1effff1f,0x1effff1f,0x1effff1f,0xf1f,0xf1f,0x0,0x0,0x1f,0x0,0x3,0x1c,0x0,0xf00,0x0,0x1efff000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x200,0x200,0x0,0x200,0x200,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public TIOjavacc(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public TIOjavacc(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new TIOjavaccTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public TIOjavacc(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new TIOjavaccTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public TIOjavacc(TIOjavaccTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(TIOjavaccTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[75];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 18; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 75; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

 }
