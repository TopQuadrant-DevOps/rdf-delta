/* TIOjavaccTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. TIOjavaccTokenManager.java */
/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.seaborne.riot.tio.alt.javacc ;





/** Token Manager. */
public class TIOjavaccTokenManager implements TIOjavaccConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 9:
         jjmatchedKind = 2;
         return jjMoveNfa_0(0, 0);
      case 10:
         jjmatchedKind = 3;
         return jjMoveNfa_0(0, 0);
      case 12:
         jjmatchedKind = 5;
         return jjMoveNfa_0(0, 0);
      case 13:
         jjmatchedKind = 4;
         return jjMoveNfa_0(0, 0);
      case 32:
         jjmatchedKind = 1;
         return jjMoveNfa_0(0, 0);
      case 40:
         jjmatchedKind = 42;
         return jjMoveNfa_0(0, 0);
      case 41:
         jjmatchedKind = 43;
         return jjMoveNfa_0(0, 0);
      case 42:
         jjmatchedKind = 58;
         return jjMoveNfa_0(0, 0);
      case 43:
         jjmatchedKind = 55;
         return jjMoveNfa_0(0, 0);
      case 44:
         jjmatchedKind = 50;
         return jjMoveNfa_0(0, 0);
      case 45:
         jjmatchedKind = 56;
         return jjMoveNfa_0(0, 0);
      case 46:
         jjmatchedKind = 23;
         return jjMoveNfa_0(0, 0);
      case 58:
         jjmatchedKind = 49;
         return jjMoveNfa_0(0, 0);
      case 59:
         jjmatchedKind = 48;
         return jjMoveNfa_0(0, 0);
      case 60:
         jjmatchedKind = 53;
         return jjMoveNfa_0(0, 0);
      case 61:
         jjmatchedKind = 51;
         return jjMoveNfa_0(0, 0);
      case 62:
         jjmatchedKind = 52;
         return jjMoveNfa_0(0, 0);
      case 64:
         jjmatchedKind = 19;
         return jjMoveNfa_0(0, 0);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x200000L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x100000L);
      case 91:
         jjmatchedKind = 46;
         return jjMoveNfa_0(0, 0);
      case 93:
         jjmatchedKind = 47;
         return jjMoveNfa_0(0, 0);
      case 94:
         return jjMoveStringLiteralDfa1_0(0x40000L);
      case 95:
         jjmatchedKind = 57;
         return jjMoveNfa_0(0, 0);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x200000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x100000L);
      case 123:
         jjmatchedKind = 44;
         return jjMoveNfa_0(0, 0);
      case 125:
         jjmatchedKind = 45;
         return jjMoveNfa_0(0, 0);
      case 126:
         jjmatchedKind = 54;
         return jjMoveNfa_0(0, 0);
      case 65279:
         jjmatchedKind = 10;
         return jjMoveNfa_0(0, 0);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 0);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000L);
      case 82:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000L);
      case 94:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 1;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 1);
   }
   switch(curChar)
   {
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000L);
      case 85:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 2);
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 3;
         }
         break;
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L);
      case 101:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 3;
         }
         break;
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 3);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 3);
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 4;
         }
         break;
      case 101:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 4;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 4);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0xfffe7000fffffff6L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x7e00000000ffffffL
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0x0L, 0xbfff000000000000L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec6 = {
   0x3000L, 0xffff000000000000L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec8 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffL
};
static final long[] jjbitVec9 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffffffffL
};
static final long[] jjbitVec10 = {
   0x0L, 0x0L, 0x80000000000000L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec11 = {
   0xffffffffffffffffL, 0xbfffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec12 = {
   0x8000000000003000L, 0xffff000000000001L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int strKind = jjmatchedKind;
   int strPos = jjmatchedPos;
   int seenUpto;
   input_stream.backup(seenUpto = curPos + 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { throw new Error("Internal Error"); }
   curPos = 0;
   int startsAt = 0;
   jjnewStateCnt = 122;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 25)
                        kind = 25;
                     { jjCheckNAddStates(0, 6); }
                  }
                  else if (curChar == 45)
                     { jjCheckNAddStates(7, 11); }
                  else if (curChar == 43)
                     { jjCheckNAddStates(12, 16); }
                  else if (curChar == 46)
                     { jjCheckNAddTwoStates(64, 76); }
                  else if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 58;
                  else if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 47;
                  else if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 17;
                  else if (curChar == 60)
                     { jjCheckNAddTwoStates(6, 7); }
                  else if (curChar == 35)
                  {
                     if (kind > 6)
                        kind = 6;
                     { jjCheckNAddStates(17, 19); }
                  }
                  else if (curChar == 63)
                     jjstateSet[jjnewStateCnt++] = 14;
                  if (curChar == 34)
                     { jjCheckNAddStates(20, 22); }
                  else if (curChar == 39)
                     { jjCheckNAddStates(23, 25); }
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  { jjCheckNAddStates(17, 19); }
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 3:
                  if (curChar == 10 && kind > 6)
                     kind = 6;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 60)
                     { jjCheckNAddTwoStates(6, 7); }
                  break;
               case 6:
                  if ((0xaffffffa00000000L & l) != 0L)
                     { jjCheckNAddTwoStates(6, 7); }
                  break;
               case 7:
                  if (curChar == 62 && kind > 11)
                     kind = 11;
                  break;
               case 8:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  { jjCheckNAddTwoStates(10, 11); }
                  break;
               case 10:
                  if ((0x3ff600000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(10, 11); }
                  break;
               case 11:
                  if ((0x3ff200000000000L & l) != 0L && kind > 12)
                     kind = 12;
                  break;
               case 13:
                  if (curChar == 63)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 14:
               case 15:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  { jjCheckNAdd(15); }
                  break;
               case 16:
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  { jjCheckNAdd(18); }
                  break;
               case 21:
                  if (curChar == 45)
                     { jjCheckNAdd(22); }
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  { jjCheckNAddTwoStates(21, 22); }
                  break;
               case 24:
                  if (curChar != 45)
                     break;
                  if (kind > 22)
                     kind = 22;
                  { jjCheckNAddTwoStates(24, 25); }
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  { jjCheckNAddTwoStates(24, 25); }
                  break;
               case 27:
                  if ((0x8400000000L & l) != 0L && kind > 37)
                     kind = 37;
                  break;
               case 28:
                  if (curChar == 39)
                     { jjCheckNAddStates(23, 25); }
                  break;
               case 29:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     { jjCheckNAddStates(23, 25); }
                  break;
               case 31:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(23, 25); }
                  break;
               case 32:
                  if (curChar == 39 && kind > 38)
                     kind = 38;
                  break;
               case 33:
                  if (curChar == 34)
                     { jjCheckNAddStates(20, 22); }
                  break;
               case 34:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddStates(20, 22); }
                  break;
               case 36:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(20, 22); }
                  break;
               case 37:
                  if (curChar == 34 && kind > 39)
                     kind = 39;
                  break;
               case 38:
                  if (curChar == 39)
                     { jjCheckNAddStates(26, 29); }
                  break;
               case 39:
               case 44:
                  if (curChar == 39)
                     { jjCheckNAddTwoStates(40, 41); }
                  break;
               case 40:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     { jjCheckNAddStates(26, 29); }
                  break;
               case 42:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(26, 29); }
                  break;
               case 43:
                  if (curChar == 39)
                     { jjAddStates(30, 31); }
                  break;
               case 45:
                  if (curChar == 39 && kind > 40)
                     kind = 40;
                  break;
               case 46:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 48:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if (curChar == 34)
                     { jjCheckNAddStates(32, 35); }
                  break;
               case 50:
               case 55:
                  if (curChar == 34)
                     { jjCheckNAddTwoStates(51, 52); }
                  break;
               case 51:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddStates(32, 35); }
                  break;
               case 53:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(32, 35); }
                  break;
               case 54:
                  if (curChar == 34)
                     { jjAddStates(36, 37); }
                  break;
               case 56:
                  if (curChar == 34 && kind > 41)
                     kind = 41;
                  break;
               case 57:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 59:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 25)
                     kind = 25;
                  { jjCheckNAddStates(0, 6); }
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 25)
                     kind = 25;
                  { jjCheckNAdd(61); }
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(62, 63); }
                  break;
               case 63:
                  if (curChar == 46)
                     { jjCheckNAdd(64); }
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  { jjCheckNAdd(64); }
                  break;
               case 65:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(65, 66); }
                  break;
               case 66:
                  if (curChar == 46)
                     { jjCheckNAddTwoStates(67, 68); }
                  break;
               case 67:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(67, 68); }
                  break;
               case 69:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(70); }
                  break;
               case 70:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 27)
                     kind = 27;
                  { jjCheckNAdd(70); }
                  break;
               case 71:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(71, 72); }
                  break;
               case 73:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(74); }
                  break;
               case 74:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 27)
                     kind = 27;
                  { jjCheckNAdd(74); }
                  break;
               case 75:
                  if (curChar == 46)
                     { jjCheckNAddTwoStates(64, 76); }
                  break;
               case 76:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(76, 77); }
                  break;
               case 78:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(79); }
                  break;
               case 79:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 27)
                     kind = 27;
                  { jjCheckNAdd(79); }
                  break;
               case 80:
                  if (curChar == 43)
                     { jjCheckNAddStates(12, 16); }
                  break;
               case 81:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 28)
                     kind = 28;
                  { jjCheckNAdd(81); }
                  break;
               case 82:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(82, 83); }
                  break;
               case 83:
                  if (curChar == 46)
                     { jjCheckNAdd(84); }
                  break;
               case 84:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 29)
                     kind = 29;
                  { jjCheckNAdd(84); }
                  break;
               case 85:
                  if (curChar == 46)
                     { jjCheckNAdd(86); }
                  break;
               case 86:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(86, 87); }
                  break;
               case 88:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(89); }
                  break;
               case 89:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 30)
                     kind = 30;
                  { jjCheckNAdd(89); }
                  break;
               case 90:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(38, 41); }
                  break;
               case 91:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(91, 92); }
                  break;
               case 92:
                  if (curChar == 46)
                     { jjCheckNAddTwoStates(93, 94); }
                  break;
               case 93:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(93, 94); }
                  break;
               case 95:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(96); }
                  break;
               case 96:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 30)
                     kind = 30;
                  { jjCheckNAdd(96); }
                  break;
               case 97:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(97, 98); }
                  break;
               case 99:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(100); }
                  break;
               case 100:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 30)
                     kind = 30;
                  { jjCheckNAdd(100); }
                  break;
               case 101:
                  if (curChar == 45)
                     { jjCheckNAddStates(7, 11); }
                  break;
               case 102:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  { jjCheckNAdd(102); }
                  break;
               case 103:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(103, 104); }
                  break;
               case 104:
                  if (curChar == 46)
                     { jjCheckNAdd(105); }
                  break;
               case 105:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  { jjCheckNAdd(105); }
                  break;
               case 106:
                  if (curChar == 46)
                     { jjCheckNAdd(107); }
                  break;
               case 107:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(107, 108); }
                  break;
               case 109:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(110); }
                  break;
               case 110:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 33)
                     kind = 33;
                  { jjCheckNAdd(110); }
                  break;
               case 111:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(42, 45); }
                  break;
               case 112:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(112, 113); }
                  break;
               case 113:
                  if (curChar == 46)
                     { jjCheckNAddTwoStates(114, 115); }
                  break;
               case 114:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(114, 115); }
                  break;
               case 116:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(117); }
                  break;
               case 117:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 33)
                     kind = 33;
                  { jjCheckNAdd(117); }
                  break;
               case 118:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(118, 119); }
                  break;
               case 120:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(121); }
                  break;
               case 121:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 33)
                     kind = 33;
                  { jjCheckNAdd(121); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 22)
                        kind = 22;
                     { jjCheckNAddTwoStates(24, 25); }
                  }
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 27;
                  else if (curChar == 64)
                     { jjCheckNAdd(20); }
                  else if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 1:
                  if (kind > 6)
                     kind = 6;
                  { jjAddStates(17, 19); }
                  break;
               case 6:
                  if ((0xc7fffffeafffffffL & l) != 0L)
                     { jjAddStates(46, 47); }
                  break;
               case 9:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  { jjCheckNAddTwoStates(10, 11); }
                  break;
               case 10:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(10, 11); }
                  break;
               case 11:
                  if ((0x7fffffe87fffffeL & l) != 0L && kind > 12)
                     kind = 12;
                  break;
               case 12:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 14:
               case 15:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  { jjCheckNAdd(15); }
                  break;
               case 17:
               case 18:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  { jjCheckNAdd(18); }
                  break;
               case 19:
                  if (curChar == 64)
                     { jjCheckNAdd(20); }
                  break;
               case 20:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  { jjCheckNAddTwoStates(20, 21); }
                  break;
               case 22:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  { jjCheckNAddTwoStates(21, 22); }
                  break;
               case 23:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  { jjCheckNAddTwoStates(24, 25); }
                  break;
               case 24:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  { jjCheckNAddTwoStates(24, 25); }
                  break;
               case 26:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 27:
                  if ((0x14404410000000L & l) != 0L && kind > 37)
                     kind = 37;
                  break;
               case 29:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(23, 25); }
                  break;
               case 30:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 31:
                  if ((0x14404410000000L & l) != 0L)
                     { jjCheckNAddStates(23, 25); }
                  break;
               case 34:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(20, 22); }
                  break;
               case 35:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 36:
                  if ((0x14404410000000L & l) != 0L)
                     { jjCheckNAddStates(20, 22); }
                  break;
               case 40:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(26, 29); }
                  break;
               case 41:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 42:
                  if ((0x14404410000000L & l) != 0L)
                     { jjCheckNAddStates(26, 29); }
                  break;
               case 51:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(32, 35); }
                  break;
               case 52:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 53:
                  if ((0x14404410000000L & l) != 0L)
                     { jjCheckNAddStates(32, 35); }
                  break;
               case 68:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(48, 49); }
                  break;
               case 72:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(50, 51); }
                  break;
               case 77:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(52, 53); }
                  break;
               case 87:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(54, 55); }
                  break;
               case 94:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(56, 57); }
                  break;
               case 98:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(58, 59); }
                  break;
               case 108:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(60, 61); }
                  break;
               case 115:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(62, 63); }
                  break;
               case 119:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(64, 65); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 6)
                     kind = 6;
                  { jjAddStates(17, 19); }
                  break;
               case 6:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(46, 47); }
                  break;
               case 9:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 12)
                     kind = 12;
                  { jjCheckNAddTwoStates(10, 11); }
                  break;
               case 10:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(10, 11); }
                  break;
               case 11:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 12)
                     kind = 12;
                  break;
               case 14:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 13)
                     kind = 13;
                  { jjCheckNAdd(15); }
                  break;
               case 15:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 13)
                     kind = 13;
                  { jjCheckNAdd(15); }
                  break;
               case 17:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 14)
                     kind = 14;
                  { jjCheckNAdd(18); }
                  break;
               case 18:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 14)
                     kind = 14;
                  { jjCheckNAdd(18); }
                  break;
               case 29:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(23, 25); }
                  break;
               case 34:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(20, 22); }
                  break;
               case 40:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(26, 29); }
                  break;
               case 51:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(32, 35); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 122 - (jjnewStateCnt = startsAt)))
         break;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { break; }
   }
   if (jjmatchedPos > strPos)
      return curPos;

   int toRet = Math.max(curPos, seenUpto);

   if (curPos < toRet)
      for (i = toRet - Math.min(curPos, seenUpto); i-- > 0; )
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) { throw new Error("Internal Error : Please send a bug report."); }

   if (jjmatchedPos < strPos)
   {
      jjmatchedKind = strKind;
      jjmatchedPos = strPos;
   }
   else if (jjmatchedPos == strPos && jjmatchedKind > strKind)
      jjmatchedKind = strKind;

   return toRet;
}
private int jjMoveStringLiteralDfa0_1()
{
   return 1;
}
static final int[] jjnextStates = {
   61, 62, 63, 65, 66, 71, 72, 102, 103, 104, 106, 111, 81, 82, 83, 85, 
   90, 1, 2, 4, 34, 35, 37, 29, 30, 32, 39, 40, 41, 43, 44, 46, 
   50, 51, 52, 54, 55, 57, 91, 92, 97, 98, 112, 113, 118, 119, 6, 7, 
   69, 70, 73, 74, 78, 79, 88, 89, 95, 96, 99, 100, 109, 110, 116, 117, 
   120, 121, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 47:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec9[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec10[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec11[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 47:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec9[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, "\ufeff", null, null, 
null, null, null, null, null, "\136\136", "\100", null, null, null, "\56", null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, "\50", "\51", "\173", "\175", "\133", "\135", "\73", "\72", "\54", 
"\75", "\76", "\74", "\176", "\53", "\55", "\137", "\52", null, null, null, null, 
null, null, null, null, null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   switch(curLexState)
   {
     case 0:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       if (jjmatchedPos == 0 && jjmatchedKind > 7)
       {
          jjmatchedKind = 7;
       }
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
           }
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public TIOjavaccTokenManager(JavaCharStream stream){

      if (JavaCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public TIOjavaccTokenManager (JavaCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(JavaCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 122; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(JavaCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_COMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x7ffffe3fefcfc01L, 0x0L, 
};
static final long[] jjtoSkip = {
   0xfeL, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x40L, 0x0L, 
};
    protected JavaCharStream  input_stream;

    private final int[] jjrounds = new int[122];
    private final int[] jjstateSet = new int[2 * 122];

    
    protected char curChar;
}
