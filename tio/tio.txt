
DOCUMENT START
TOKENS
// ------------------------------------------
// Tokens

// Comments and whitespace
<DEFAULT> SKIP : {
" "
| "\t"
| "\n"
| "\r"
| "\f"
}

<DEFAULT> SPECIAL : {
<SINGLE_LINE_COMMENT: "#" (~["\n","\r"])* ("\n" | "\r" | "\r\n")?>
}

// When any other character is seen in the IN_COMMENT state, skip it.
<IN_COMMENT> SKIP : {
<~[]>
}

<DEFAULT> TOKEN : {
<#WS: " " | "\t" | "\n" | "\r" | "\f">
| <#WSC: <WS> | <SINGLE_LINE_COMMENT>>
| <BOM: "\ufeff">
}

// Main tokens */
<DEFAULT> TOKEN : {
<IRIref: "<" (~[">","<","\"","{","}","^","\\","|","`","\u0000"-" "])* ">">
| <BLANK_NODE_LABEL: "_:" (<PN_CHARS_U> | ["0"-"9"]) ((<PN_CHARS> | ".")* <PN_CHARS>)?>
| <VAR1: "?" <VARNAME>>
| <VAR2: "$" <VARNAME>>
| <LANGTAG: <AT> (<A2Z>)+ ("-" (<A2ZN>)+)*>
| <#A2Z: ["a"-"z","A"-"Z"]>
| <#A2ZN: ["a"-"z","A"-"Z","0"-"9"]>
| <DATATYPE: "^^">
| <AT: "@">
}

// -------------------------------------------------
<DEFAULT> TOKEN [IGNORE_CASE] : {
<TRUE: "true">
| <FALSE: "false">
| <KEYWORD: <A2Z> (<A2Z> | <DIGITS> | "_" | "-")*>
| <DOT: ".">
| <PLUS: "+">
| <MINUS: "-">
}

<DEFAULT> TOKEN : {
<#DIGITS: (["0"-"9"])+>
| <INTEGER: <DIGITS>>
| <DECIMAL: (<DIGITS>)? "." <DIGITS>>
| <DOUBLE: (["0"-"9"])+ "." (["0"-"9"])* <EXPONENT> | "." (["0"-"9"])+ <EXPONENT> | (["0"-"9"])+ <EXPONENT>>
| <INTEGER_POSITIVE: <PLUS> <INTEGER>>
| <DECIMAL_POSITIVE: <PLUS> <DECIMAL>>
| <DOUBLE_POSITIVE: <PLUS> <DOUBLE>>
| <INTEGER_NEGATIVE: <MINUS> <INTEGER>>
| <DECIMAL_NEGATIVE: <MINUS> <DECIMAL>>
| <DOUBLE_NEGATIVE: <MINUS> <DOUBLE>>
| <#EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+>
| <#QUOTE_3D: "\"\"\"">
| <#QUOTE_3S: "\'\'\'">
| <ECHAR: "\\" ("t" | "b" | "n" | "r" | "f" | "\\" | "\"" | "\'")>
| <STRING_LITERAL1: "\'" (~["\'","\\","\n","\r"] | <ECHAR>)* "\'">
| <STRING_LITERAL2: "\"" (~["\"","\\","\n","\r"] | <ECHAR>)* "\"">
| <STRING_LITERAL_LONG1: <QUOTE_3S> (("\'" | "\'\'")? (~["\'","\\"] | <ECHAR>))* <QUOTE_3S>>
| <STRING_LITERAL_LONG2: <QUOTE_3D> (("\"" | "\"\"")? (~["\"","\\"] | <ECHAR>))* <QUOTE_3D>>
}

// TOKEN :
// {
//   < LPAREN:    "(" >
// | < RPAREN:    ")" >
// | <NIL: <LPAREN> (<WSC>)* <RPAREN> >
// 
// | < LBRACE:    "{" >
// | < RBRACE:    "}" >
// 
// | < LBRACKET:  "[" >
// | < RBRACKET:  "]" >
// | < ANON:      <LBRACKET> (<WSC>)* <RBRACKET> >
// 
// | < SEMICOLON: ";" >
// | < COMMA:     "," >
// | < EQ:        "=" >
// | < NE:        "!=" >
// | < GT:        ">" >
// | < LT:        "<" >
// | < LE:        "<=" >
// | < GE:        ">=" >
// 
// | < BANG:    "!" >
// | < TILDE:   "~" >
// | < COLON:   ":" >
// 
// | < SC_OR:   "||" >
// | < SC_AND:  "&&" >
// 
// | < PLUS:    "+" >
// | < MINUS:   "-" >
// | < STAR:    "*" >
// | < SLASH:   "/" >
// 
// //| < AMP: "&" >
// //| < REM: "%" >
// 
// | < ASSIGN:     ":=">
// 
// // Path related
// | < VBAR:     "|" >
// | < CARAT:    "^" >
// | < FPATH:    "->" >
// | < RPATH:    "<-" >
// | < QMARK:    "?" >
// }
<DEFAULT> TOKEN : {
<#PN_CHARS_BASE: ["A"-"Z"] | ["a"-"z"] | ["\u00c0"-"\u00d6"] | ["\u00d8"-"\u00f6"] | ["\u00f8"-"\u02ff"] | ["\u0370"-"\u037d"] | ["\u037f"-"\u1fff"] | ["\u200c"-"\u200d"] | ["\u2070"-"\u218f"] | ["\u2c00"-"\u2fef"] | ["\u3001"-"\ud7ff"] | ["\uf900"-"\ufffd"]>
| <#PN_CHARS_U: <PN_CHARS_BASE> | "_">
| <#PN_CHARS: <PN_CHARS_U> | "-" | ["0"-"9"] | "\u00b7" | ["\u0300"-"\u036f"] | ["\u203f"-"\u2040"]>
| <#PN_PREFIX: <PN_CHARS_BASE> ((<PN_CHARS> | ".")* <PN_CHARS>)?>
| <#PN_LOCAL: (<PN_CHARS_U> | ":" | ["0"-"9"] | <PLX>) ((<PN_CHARS> | "." | ":" | <PLX>)* (<PN_CHARS> | ":" | <PLX>))?>
| <#VARNAME: (<PN_CHARS_U> | ["0"-"9"]) (<PN_CHARS_U> | ["0"-"9"] | "\u00b7" | ["\u0300"-"\u036f"] | ["\u203f"-"\u2040"])*>
| <#PN_LOCAL_ESC: "\\" ("_" | "~" | "." | "-" | "!" | "$" | "&" | "\'" | "(" | ")" | "*" | "+" | "," | ";" | "=" | "/" | "?" | "#" | "@" | "%")>
| <#PLX: <PERCENT> | <PN_LOCAL_ESC>>
| <#HEX: ["0"-"9"] | ["A"-"F"] | ["a"-"f"]>
| <#PERCENT: "%" <HEX> <HEX>>
}

// Catch-all tokens.  Must be last.  
// Any non-whitespace.  Causes a parser exception, rather than a
// token manager error (which hides the line numbers).
<DEFAULT> TOKEN : {
<#UNKNOWN: (~[" ","\t","\n","\r","\f"])+>
}

NON-TERMINALS
	Unit	:=	ByteOrderMark ( Tuple )*
	ByteOrderMark	:=	( <BOM> )?
	Tuple	:=	<KEYWORD> ( Entry )* <DOT>
	Entry	:=	( <KEYWORD> | iri | RDFLiteral | BlankNode )
	Literal	:=	( RDFLiteral | NumericLiteral | BooleanLiteral )
	RDFLiteral	:=	String ( ( <LANGTAG> ) | ( <DATATYPE> iri ) )?
	NumericLiteral	:=	( NumericLiteralUnsigned | NumericLiteralPositive | NumericLiteralNegative )
	NumericLiteralUnsigned	:=	<INTEGER>
		|	<DECIMAL>
		|	<DOUBLE>
	NumericLiteralPositive	:=	<INTEGER_POSITIVE>
		|	<DECIMAL_POSITIVE>
		|	<DOUBLE_POSITIVE>
	NumericLiteralNegative	:=	<INTEGER_NEGATIVE>
		|	<DECIMAL_NEGATIVE>
		|	<DOUBLE_NEGATIVE>
	BooleanLiteral	:=	<TRUE>
		|	<FALSE>
	String	:=	( <STRING_LITERAL1> | <STRING_LITERAL2> | <STRING_LITERAL_LONG1> | <STRING_LITERAL_LONG2> )
	iri	:=	<IRIref>
	BlankNode	:=	<BLANK_NODE_LABEL>

DOCUMENT END
